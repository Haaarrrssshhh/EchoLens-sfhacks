import { GoogleGenerativeAI } from "@google/generative-ai";
import 'dotenv/config';
const fs = require("fs");

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
console.log("Generative AI initialized", genAI);

// Helper function to convert a file to a generative part by reading it as base64
function fileToGenerativePart(path, mimeType) {
  return {
    inlineData: {
      data: Buffer.from(fs.readFileSync(path)).toString("base64"),
      mimeType: mimeType
    },
  };
}

/**
 * Transcribes a text content for accessibility.
 * @param {string} textContent - The text to be transcribed.
 * @returns {Promise<string>} - The transcript generated by the Gemini API.
 */
export async function getTextTranscript(textContent) {
  try {
    console.log(textContent,"textContent");
    
    const model = genAI.getGenerativeModel({ model: "gemini-1.5-pro" });
    const prompt = "Transcribe the following text for a blind user.";
    const result = await model.generateContent([prompt, textContent]);
    const transcript = await result.response.text();
    return transcript;
  } catch (error) {
    console.error("Error in getTextTranscript:", error);
    return "I'm sorry, I could not process the text content.";
  }
}

/**
 * Transcribes an image by providing its description for accessibility.
 * @param {Object} image - An object containing image properties.
 * @param {string} image.src - The local path to the image file.
 * @param {string} image.mimeType - The MIME type of the image.
 * @param {string} [image.alt] - Optional alternative text for the image.
 * @returns {Promise<string>} - The transcript generated by the Gemini API.
 */
export async function getImageTranscript(image) {
  try {
    const model = genAI.getGenerativeModel({ model: "gemini-1.5-pro" });
    const prompt = "Transcribe the following image for a blind user. Provide a description of the image.";
    const altText = image.alt ? image.alt : "No alt text provided";
    const contentPrompt = `Image description request for: ${altText}`;
    const imagePart = fileToGenerativePart(image.src, image.mimeType);
    const result = await model.generateContent([prompt, contentPrompt, imagePart]);
    const transcript = await result.response.text();
    return transcript;
  } catch (error) {
    console.error("Error in getImageTranscript:", error);
    return "I'm sorry, I could not process the image content.";
  }
}

